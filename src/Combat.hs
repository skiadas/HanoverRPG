{-|
Module      : Combat
Description : The Combat module
Copyright   : (c) Kenny Jarnagin, 2017
                  Lucas Miller, 2017
License     : MIT
Maintainer  : jarnagink19@hanover.edu

Here is a longer description of this module, containing some
commentary with @some markup@. 
-}

module Combat
(
    updateUnit
) where

import Combat.ActionOptions
import Unit
import UI 
import AI 


--Determine what the actual effect generated by the Source Unit is 
actionValue :: Unit -> Action -> Int
actionValue source (Attack (source, target)) = -((attack*speed)/10) + defense
    where attack  = getAttack source
          speed   = getSpeed source
          defense = (getDefense target) % 2
actionValue source (Heal (source, _))   = 10


--Given a Source Unit, a Target Unit and some action (defined in Action.hs), update the Target's health
updateUnit :: Unit -> Unit -> Action -> Unit 
updateUnit source target action = health + effect
    where effect = actionValue source action
          health = getHealth target

--Carry out the action provided by the UI team. sourceTurn & targetTurn should be calling each other
--to continue the fight until the UI or the AI unit "isDead"
sourceTurn :: Unit -> Unit -> IO (Unit, Unit)
sourceTurn source target = do
    turn <- UI.getAction

--Carry out the action provided by the AI team. sourceTurn & targetTurn should be calling each other
--to continue the fight until the UI or the AI unit "isDead"
targetTurn :: Unit -> Unit -> IO (Unit, Unit)
targetTurn source target = do
    turn <- AI.chooseAction
    case turn of
        Attack (Unit, _)-> updateUnit source target turn
        Heal   -> updateUnit source target turn

doBattle :: Unit -> Unit -> IO (Unit, Unit)
doBattle source target | getSpeed(source) >= getSpeed(target) = sourceTurn source target
                       | otherwise = targetTurn target source






